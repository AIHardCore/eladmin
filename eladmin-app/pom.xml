<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>eladmin</artifactId>
        <groupId>me.zhengjie</groupId>
        <version>2.7</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>me.zhengjie</groupId>
    <artifactId>eladmin-app</artifactId>
    <name>APP模块</name>

    <properties>
        <!-- 定义打包后的文件存放位置，一般为项目名， -->
        <package.path>${project.build.directory}/Jar</package.path>
        <jjwt.version>0.11.5</jjwt.version>
    </properties>

    <dependencies>
        <!-- tools 模块包含了 common 和 logging 模块 -->
        <dependency>
            <groupId>me.zhengjie</groupId>
            <artifactId>eladmin-tools</artifactId>
            <version>2.7</version>
        </dependency>

        <!-- jwt -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>${jjwt.version}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>${jjwt.version}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>${jjwt.version}</version>
        </dependency>
    </dependencies>

    <!-- 打包 -->
    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <!-- 开始处理启动模块jar包， -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <!--在启动模块的jar中排除以下文件类型,这是为了避免启动模块jar和后续的config目录下存在两份相同资源文件从而导致项目无法重启-->
                    <excludes>
                        <exclude>**/*.xml</exclude>
                        <exclude>**/*.yml</exclude>
                    </excludes>
                    <archive>
                        <manifest>
                            <!-- 执行的主程序路径 -->
                            <mainClass>me.zhengjie.AppApplication</mainClass>
                            <!--是否要把第三方jar放到manifest的classpath中-->
                            <addClasspath>true</addClasspath>
                            <!--生成的manifest中classpath的前缀，因为要把第三方jar放到lib目录下，所以classpath的前缀是lib/-->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!-- 打包时 MANIFEST.MF 文件不记录的时间戳版本 -->
                            <useUniqueVersions>false</useUniqueVersions>
                        </manifest>
                        <manifestEntries>
                            <!-- 在 Class-Path 下添加配置文件的路径 -->
                            <Class-Path>../config/</Class-Path>
                        </manifestEntries>
                    </archive>
                    <!-- 将启动模块的jar包也输出到${package.path}下 -->
                    <outputDirectory>${package.path}/</outputDirectory>
                </configuration>
            </plugin>
            <!-- 开始处理依赖包，将所有资源文件拷贝到${package.path}/lib下 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${package.path}/lib/</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 开始处理资源文件，将所有资源文件拷贝到${package.path}/config下 -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <!--把配置文件打包到指定路径-->
                                <resource>
                                    <directory>src/main/resources/</directory>
                                </resource>
                            </resources>
                            <outputDirectory>${package.path}/config</outputDirectory>
                        </configuration>
                    </execution>
                    <!--copy 脚本，把bin目录下的文件复制到，打包目录下-->
                    <execution>
                        <id>copy-bin</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <!--注意：此处bin脚本目录在src下，根据实际情况填写-->
                                    <directory>src/bin/</directory>
                                </resource>
                            </resources>
                            <outputDirectory>${package.path}/bin</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
